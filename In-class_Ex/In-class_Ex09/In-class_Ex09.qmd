---
title: "In-class Exercise 9"
format: 
  html:
    code-line-numbers: true
    number-sections: true
    highlight-style: github
execute:
  warning: false
  echo: true  
  eval: true
editor: visual
date: "6 March 2023"
date-modified: "`r Sys.Date()`"
---

::: callout-tip
Create a model folder under data so you can save all the modelling.
:::

# Install R Packages

```{r}
pacman::p_load(sf, tmap, sfdep, tidyverse, olsrr, ggpubr, GWmodel, SpatialML, tidymodels) 
# either import tidymodels or rsample
```

# Import Data

```{r}
mdata <- read_rds("data/aspatial/mdata.rds")
head(mdata)
```

```{r}
set.seed(1234)
resale_split <- initial_split(mdata, # initial_split is from tidymodels
                              prop = 6.5/10) # 65% will be train, 35% will be test
train_data <- training(resale_split)
test_data <- testing(resale_split)
```

Write to `data/model` folder to save train and test data so we will not need to rerun randomisation.

```{r}
write_rds(train_data, "data/model/train_data.rds")
write_rds(test_data, "data/model/test_data.rds")
```

## Retrieve Stored Data

```{r}
train_data <- read_rds("data/model/train_data.rds")
test_data <- read_rds("data/model/test_data.rds")
```

# Building a Non-spatial Multi-Linear Regression

```{r}
price_mlr <- lm(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL +
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                data = train_data)
summary(price_mlr)
```

```{r}
write_rds(price_mlr, "data/model/price_mlr.rds")
```

## GWR Predictive Method

```{r}
training_data_sp <- as_Spatial(train_data)
training_data_sp
```

## Preparing Coordinates

### Extracting coordinates

Extract x,y coordinates of the full, training and test datasets.

```{r}
coords <- st_coordinates(mdata)
coords_train <- st_coordinates(train_data)
coords_test <- st_coordinates(test_data)
```

```{r}
write_rds(coords_train, "data/model/coords_train.rds")
write_rds(coords_test, "data/model/coords_test.rds")
```

Firstly, the geometry columns of the sf dataframe will be dropped using `st_drop_geometry()`

```{r}
train_data <- train_data %>% 
  st_drop_geometry()
```

## Calibrating Random Forest

Perform random forest regression using **ranger** package.

```{r}
set.seed(1234)
rf <- ranger(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL +
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                data = train_data)
rf # OOB prediction error (MSE) is not the same as Residual standard error as it has not been square-root
```

::: callout-important
### For the code chunk below...

It shouldn't run longer than 10 minutes.
:::

```{r eval=FALSE}
set.seed(1234)
gwRF_adaptive <- grf(formula = resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL +
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                dframe = train_data, # if coords col not removed, the column data will be recognised as a list
                bw = 55, # 55 nearest transactions
                # use grf.bw() to calculate the suitable bandwidth
                kernel = "adaptive", # if kernel diff, bw or bandwidth will also be diff
                coords = coords_train)
gwRF_adaptive 
```

The top chunk of the report is for statistic and descriptive. Whereas the bottom chunk of the report is for predictive.

```{r eval=FALSE}

write_rds(gwRF_adaptive, "data/model/gwRF_adaptive.rds")
```

::: callout-important
Type into the console "gwRF_adaptive \$ Global_Model \$ variable.importance" (without space) to get how important each variable is.
:::

```{r eval=FALSE}
vi_df <- as.data.frame(gwRF_adaptive$Global_Model$variable.importance)
```

### Predicting Test Data

#### Prepare Test Data

Combining the test data with its corresponding coordinates data.

```{r eval=FALSE}
test_data <- cbind(test_data, coords_test) %>% 
  st_drop_geometry()
```

#### Predict Test Data

```{r eval=FALSE}
# takes very long to run
gwRF_pred <- predict.grf(gwf.adaptive,
                    test_data,
                    x.var.name = "X",
                    y.var.name = "Y",
                    local.w = 1,
                    global.w = 0)
```

```{r eval=FALSE}
gwRF_pred_df <- as.data.frame(gwRF_pred)
```
