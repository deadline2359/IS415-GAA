---
title: "In-class Exercise 6: Spatial Weights and Applications"
format: 
  html:
    code-line-numbers: true
    number-sections: true
    highlight-style: github
execute:
  warning: false
  echo: true  
  eval: true
editor: visual
date: "13 February 2023"
date-modified: "`r Sys.Date()`"
---

# Goals

-   Learn how to compute spatial weights

# Datasets

-   **Hunan county boundary layer**: This is a geospatial data set in ESRI shapefile format.
-   **Hunan_2012.csv**: This csv file contains selected Hunan's local development indicators in 2012.

# R Packages

```{r}
pacman::p_load(sf, sfdep, tmap, tidyverse)
```

# Import Data

## Hunan County Boundaries

::: panel-tabset
### Importing

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

### Data

```{r}
head(hunan, 5)
```
:::

## Hunan's Local Development Indicators (2012)

::: panel-tabset
### Importing

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

### Data

```{r}
head(hunan2012, 5)
```
:::

## Performing Relational Join

Update the attribute table of *hunan*'s SpatialPolygonsDataFrame with the attribute fields of *hunan2012* dataframe. This is performed by using `left_join()` of **dplyr** package.

::: panel-tabset
### Code

```{r}
hunan_GDPPC <- left_join(hunan,hunan2012)%>%
  select(1:4, 7, 15)
colnames(hunan_GDPPC)
```

### Data

```{r}
head(hunan_GDPPC, 5)
```
:::

::: callout-warning
In order to retain the geospatial properties, the [left]{.underline} dataframe must be a **sf** dataframe (i.e., **hunan** in our case)

In addition, `left_join()` does not allow joining columns where their names are of different cases.
:::

# Visualising Regional Development Indicator

Now, we will create a [choropleth]{.underline} map showing the **distribution of GDPPC 2012**.

::: panel-tabset
## Using [tmap]{.underline}

```{r}
tm_shape(hunan_GDPPC) +
  tm_fill("GDPPC",
          style = "quantile",
          palette = "Blues",
          title = "GDP Per Capita") +
  tm_layout(main.title = "Distribution of GDP Per Capita by distribution",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45,
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type = "8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha = 0.2)
```

## Using `qtm()`

```{r}
basemap <- tm_shape(hunan_GDPPC) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5) # add text labels

gdppc <- qtm(hunan_GDPPC, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```
:::

# Computing Contiguity Spatial Weights

[`st_contiguity()`](https://rdrr.io/cran/sfdep/man/st_contiguity.html) is used to derive a contiguity neighoubour list. `st_contiguity()` wraps `poly2nb()` in **spdep**.

It will create a new column "**nb**" (i.e., neighbours). Each row will contain a list for areas adjacent to a region.

`st_weights()` then using **nb** to create a list of weights.

::: panel-tabset
## Queen

```{r}
wm_queen <- hunan_GDPPC %>% 
  mutate(nb = st_contiguity(geometry), 
         wt = st_weights(nb),
         .before = 1) # put it as the first column
head(wm_queen, 5)
```

## Rook

Include the parameter `queen = FALSE` to change to rook's method.

```{r}
cn_rook <- hunan_GDPPC %>% 
  mutate(nb = st_contiguity(geometry), 
         wt = st_weights(nb),
         queen = FALSE,
         .before = 1)
head(cn_rook, 5)
```
:::
