---
title: "In-class Exercise 11"
format: 
  html:
    code-line-numbers: true
    number-sections: true
    highlight-style: github
execute:
  warning: false
  echo: true  
  eval: true
editor: visual
date: "27 March 2023"
date-modified: "`r Sys.Date()`"
---

# Getting Started

```{r}
pacman::p_load(tmap, sf, sp, caret, stplanr, reshape2, broom, tidyverse)
```

## Preparing the Flow Data

### Importing the OD Data

The table produced by importing the CSV file will be a tibble dataframe.

::: {.panel-tabset}

#### Code

```{r}
odbus <- read_csv("data/aspatial/origin_destination_bus_202210.csv")
```
#### Data

```{r}
head(odbus, 5)
```

:::

Convert the data column to factor datatype, which is ordinal.

```{r}
odbus$ORIGIN_PT_CODE <-
  as.factor(odbus$ORIGIN_PT_CODE)

odbus$DESTINATION_PT_CODE <-
  as.factor(odbus$DESTINATION_PT_CODE)
```

#### Extracting 

Get trips occurred on weekdays that are within 7am to 9am and group them by the starting and destination bus stops, and finally get their sum

::: {.panel-tabset}

##### Code

```{r}
odbus7_9 <- odbus %>% 
  filter(DAY_TYPE == "WEEKDAY") %>% 
  filter(TIME_PER_HOUR >= 7 &
           TIME_PER_HOUR <= 9) %>% 
  group_by(ORIGIN_PT_CODE,
         DESTINATION_PT_CODE) %>% 
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

# Data

```{r}
head(odbus7_9, 5)
```

:::

```{r eval=FALSE}
write_rds(odbus7_9, "data/rds/odbus7_9.rds")
```

```{r}
odbus7_9 <- read_rds("data/rds/odbus7_9.rds")
```


```{r}
busstop <- st_read(dsn = "data/geospatial",
                   layer = "BusStop") %>% 
  st_transform(crs = 3414)
```

```{r}
mpsz <-  st_read(dsn = "data/geospatial",
                   layer = "MPSZ-2019") %>% 
  st_transform(crs = 3414)
```

Sequence is important of the dataframes in using `st_intersection()`. 

```{r}
busstop_mpsz <- st_intersection(busstop, mpsz) %>% 
  select(BUS_STOP_N, SUBZONE_C) %>% 
  st_drop_geometry()
head(busstop_mpsz, 5)
```

::: {.callout-note}
#### Missing Bus Stops

There are 5 bus stops that disappeared in *busstop_mpsz*. 

The 5 bus stops are actually in Johor Bahru, outside of our MPSZ boundaries.
:::


```{r}
od_data <- left_join(odbus7_9, busstop_mpsz, 
                     by=c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>% 
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C,
         DESTIN_BS = DESTINATION_PT_CODE)

head(od_data, 5)
```

Filter for duplicated rows

```{r}
duplicate <- od_data %>% 
  group_by_all() %>% 
  filter(n()>1) %>% 
  ungroup()

head(duplicate)
```

The duplications are due to each row duplicated once, resulting in 2 rows.

This can be resolved by simply picking out the unique rows.

```{r}
od_data <- unique(od_data)
```

checking
```{r}
duplicate <- od_data %>% 
  group_by_all() %>% 
  filter(n()>1) %>% 
  ungroup()

head(duplicate)
```


 join again to get destination bus stops
```{r}
od_data <- left_join(od_data, busstop_mpsz,
                     by = c("DESTIN_BS" = "BUS_STOP_N"))
```
```{r}
duplicate2 <- od_data %>% 
  group_by_all() %>% 
  filter(n()>1) %>% 
  ungroup()

head(duplicate)
```

```{r}
od_data <- unique(od_data)
```

Drop NAs

```{r}
od_data <- od_data %>% 
  rename(DESTIN_SZ = SUBZONE_C) %>% 
  drop_na()
od_data
```

```{r eval=FALSE}
write_rds(od_data, "data/rds/od_data.rds")
```

```{r}
od_data <- read_rds("data/rds/od_data.rds")
```

## Visualising Geospatial Data
```{r}
tmap_mode("view")
tmap_options(check.and.fix = TRUE) # fix invalid polygons
qtm(mpsz)
```

# Isolating SUBZONE_C into a new df
```{r}
mpsz <- mpsz[order(mpsz$SUBZONE_C),] # ordering by subzone code
head(mpsz, 10)
```

```{r}
mpsz_sp <- as(mpsz, "Spatial")
```

### Computing the distance matrix

needs to be sp dataframe

```{r}
dist <- spDists(mpsz_sp)
dist
```

```{r}
sz_names <-mpsz$SUBZONE_C
```

### Attaching SUBZONE_C to row and column for distance matrix matching ahaed

```{r}
colnames(dist) <- paste0(sz_names)
rownames(dist) <- paste0(sz_names)
```

### Pivoting distance values by SUBZONE_C

```{r}
distPair <- melt(dist) %>% 
  rename(dist = value)

head(distPair, 10)
```

### Updating intra-zonal distances
```{r}
distPair %>% 
  filter(dist > 0) %>% 
  summary()
```
fill in 0s

```{r}
distPair$dist <- ifelse(distPair$dist == 0,
                        50, # just need to be smaller than the min dist
                        distPair$dist)
```

```{r}
distPair <- distPair %>% 
  rename(orig = Var1,
         dest = Var2)
```

```{r}
flow_data <- od_data %>% 
  group_by(ORIGIN_SZ, DESTIN_SZ) %>% 
  summarise(TRIPS = sum(TRIPS))
```

```{r}
pop <- read_csv("data/aspatial/pop.csv")
```

```{r}
pop <- pop %>% 
  left_join(mpsz,
            by = c("PA" = "PLN_AREA_N",
                   "SZ" = "SUBZONE_N")) %>% 
  select(1:6) %>% 
  rename(SZ_NAME = SZ, 
         SZ = SUBZONE_C)

pop
```

```{r}
flow_data1 <- flow_data %>% 
  left_join(distPair, 
            by = c("ORIGIN_SZ" = "orig",
                   "DESTIN_SZ" = "dest"))
```


### Destination Populatio

```{r}
flow_data1 <- flow_data %>% 
  left_join(pop,
            by = c(ORIGIN_SZ = "SZ")) %>% 
  rename(ORIGIN_AGE7_12 = AGE7_12,
         ORIGIN_AGE13_24 = AGE13_24,
         ORIGIN_AGE25_64 = AGE25_64) %>% 
  select(-c(PA, SZ_NAME))
flow_data1
```

