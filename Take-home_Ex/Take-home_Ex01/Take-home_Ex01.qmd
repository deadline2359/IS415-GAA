---
title: "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods"
format: 
  html:
    code-line-numbers: true
    number-sections: true
    highlight-style: github
execute:
  warning: false
  echo: true  
  eval: true
editor: visual
date: "30 January 2023"
date-modified: "`r Sys.Date()`"
---

# Import R Packages

```{r}
pacman::p_load(sf, tidyverse, funModeling, tmap)
```

# Import Datasets

## WPdx+ Dataset

```{r}
wp_osun <- read_csv("data/aspatial/Water_Point_Data_Exchange_-_Plus__WPdx__.csv") %>% filter(`#clean_country_name` == "Nigeria" &
                                                                                              `#clean_adm1` == "Osun")
```

## Nigeria Osun State

```{r}
NGA <- st_read(dsn = "data/geospatial/nga_adm_osgof_20190417",
               layer = "nga_admbnda_adm2_osgof_20190417") %>%
  st_transform(crs = 26392)
```

# Data Handling

## WPdx+ Dataset

```{r}
wp_osun$Geometry = st_as_sfc(wp_osun$`New Georeferenced Column`)
wp_osun
```

#### Create Simple Feature DataFrame

```{r}
wp_sf <- st_sf(wp_osun, crs=4326)
```

```{r}
wp_sf <- wp_sf %>%
  st_transform(crs = 26392)
```

# Geospatial Data Cleaning

## Excluding Redundant Fields

```{r}
NGA <- NGA  %>%
  filter(`ADM1_EN` == "Osun") %>%
  select(c(3:4, 8:9))
NGA
```

## Checking for Duplicated Name

You can see that no duplicated LGAs in the Osun state.

```{r}
NGA$ADM2_EN[duplicated(NGA$ADM2_EN) == TRUE]
```

```{r}
wp_sf <- st_intersection(NGA, wp_sf)
```

# Data Wrangling for Water Point Data

```{r}
freq(data = wp_sf,
     input = 'X.status_clean')
```

```{r}
wp_sf_nga <- wp_sf %>%
  rename(status_clean = 'X.status_clean') %>%
  select(status_clean) %>%
  mutate(status_clean = replace_na(
    status_clean, "unknown" # rename NA to be called "unknown"
  ))

freq(data = wp_sf_nga,
     input = 'status_clean')
```

## Extract Water Point Data

```{r}
wp_functional <- wp_sf_nga %>%
  filter(status_clean %in%
           c("Functional",
             "Functional but not in use",
             "Functional but needs repair"))
```

```{r}
wp_nonfunctional <- wp_sf_nga %>%
  filter(status_clean %in%
           c("Abandoned/Decommissioned",
             "Abandoned",
             "Non-Functional due to dry season",
             "Non-Functional",
             "Non functional due to dry season"))
```

```{r}
wp_unknown <- wp_sf_nga %>%
  filter(status_clean == "unknown")
```

## Performing Point-in-Polygon Count

```{r}
NGA_wp <- NGA %>%
  mutate('total_wp' = lengths(
    st_intersects(NGA, wp_sf_nga))) %>%
  mutate('wp_functional' = lengths(
    st_intersects(NGA, wp_functional))) %>%
  mutate('wp_nonfunctional' = lengths(
    st_intersects(NGA, wp_nonfunctional))) %>%
  mutate('wp_unknown' = lengths(
    st_intersects(NGA, wp_unknown)))
NGA_wp
```

```{r}
ggplot(data = NGA_wp,
       aes(x = total_wp)) + 
  geom_histogram(bins=20,
                 color="black",
                 fill="light blue") +
  geom_vline(aes(xintercept=mean(
    total_wp, na.rm=T)),
             color="red", 
             linetype="dashed", 
             size=0.8) +
  ggtitle("Distribution of total water points by LGA") +
  xlab("No. of water points") +
  ylab("No. of\nLGAs") +
  theme(axis.title.y=element_text(angle = 0))
```

# First-order Spatial Point Patterns Analysis

```{r}
#tmap_mode("view")
#tm_shape(rbind(wp_functional, wp_nonfunctional)) +
 # tm_dots(col = "status_clean",
  #        palette = colors("greens"))
```
