---
title: "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods"
format: 
  html:
    code-line-numbers: true
    number-sections: true
    highlight-style: github
execute:
  warning: false
  echo: true  
  eval: true
editor: visual
date: "30 January 2023"
date-modified: "`r Sys.Date()`"
---

# Import R Packages

```{r}
pacman::p_load(sf, tidyverse, funModeling, tmap, spatstat, maptools, raster)
```

# Import Datasets

## WPdx+ Dataset

```{r}
wp_oswp_osunun <- read_csv("data/aspatial/Water_Point_Data_Exchange_-_Plus__WPdx__.csv") %>% filter(`#clean_country_name` == "Nigeria" &
                                                                                              `#clean_adm1` == "Osun")
```

## Nigeria Osun State

```{r}
NGA <- st_read(dsn = "data/geospatial/nga_adm_osgof_20190417",
               layer = "nga_admbnda_adm2_osgof_20190417") %>%
  st_transform(crs = 26392)
```

# Data Handling

## WPdx+ Dataset

```{r}
wp_osun$Geometry = st_as_sfc(wp_osun$`New Georeferenced Column`)
wp_osun
```

#### Create Simple Feature DataFrame

```{r}
wp_sf <- st_sf(wp_osun, crs=4326)
```

```{r}
wp_sf <- wp_sf %>%
  st_transform(crs = 26392)
```

# Geospatial Data Cleaning

## Excluding Redundant Fields

```{r}
NGA <- NGA  %>%
  filter(`ADM1_EN` == "Osun") %>%
  dplyr::select(c(3:4, 8:9))
NGA
```

## Checking for Duplicated Name

You can see that no duplicated LGAs in the Osun state.

```{r}
NGA$ADM2_EN[duplicated(NGA$ADM2_EN) == TRUE]
```

```{r}
wp_sf <- st_intersection(NGA, wp_sf)
```

# Data Wrangling for Water Point Data

```{r}
funModeling::freq(data = wp_sf,
     input = 'X.status_clean')
```

```{r}
wp_sf_nga <- wp_sf %>%
  rename(status_clean = 'X.status_clean') %>%
  dplyr::select(status_clean) %>%
  mutate(status_clean = replace_na(
    status_clean, "unknown" # rename NA to be called "unknown"
  ))

funModeling::freq(data = wp_sf_nga,
     input = 'status_clean')
```

## Extract Water Point Data

```{r}
wp_functional <- wp_sf_nga %>%
  filter(status_clean %in%
           c("Functional",
             "Functional but not in use",
             "Functional but needs repair"))
```

```{r}
wp_nonfunctional <- wp_sf_nga %>%
  filter(status_clean %in%
           c("Abandoned/Decommissioned",
             "Abandoned",
             "Non-Functional due to dry season",
             "Non-Functional",
             "Non functional due to dry season"))
```

```{r}
wp_unknown <- wp_sf_nga %>%
  filter(status_clean == "unknown")
```

## Performing Point-in-Polygon Count

```{r}
NGA_wp <- NGA %>%
  mutate('total_wp' = lengths(
    st_intersects(NGA, wp_sf_nga))) %>%
  mutate('wp_functional' = lengths(
    st_intersects(NGA, wp_functional))) %>%
  mutate('wp_nonfunctional' = lengths(
    st_intersects(NGA, wp_nonfunctional))) %>%
  mutate('wp_unknown' = lengths(
    st_intersects(NGA, wp_unknown)))
NGA_wp
```

```{r}
ggplot(data = NGA_wp,
       aes(x = total_wp)) + 
  geom_histogram(bins=20,
                 color="black",
                 fill="light blue") +
  geom_vline(aes(xintercept=mean(
    total_wp, na.rm=T)),
             color="red", 
             linetype="dashed", 
             size=0.8) +
  ggtitle("Distribution of total water points by LGA") +
  xlab("No. of water points") +
  ylab("No. of\nLGAs") +
  theme(axis.title.y=element_text(angle = 0))
```

# First-order Spatial Point Patterns Analysis

Creating a simple interactive map, we can easily see that most of the water points are located towards the north of Osun, leaving the south with little.

```{r}
tmap_mode("view")
tm_shape(wp_functional) +
 tm_dots(col = "status_clean",
         pal = "darkblue",
         title = "Functional") +
tm_shape(wp_nonfunctional) +
 tm_dots(col = "status_clean",
         pal = "orange",
         title = "Non-Functional") +
  tm_view(set.zoom.limits = c(5,25),
          set.view = 9) 
tmap_mode("plot")
```

Looking at the functional and non-functional water points separately, both maps reflect the same trend as the above map where the water points are largely located towards the north.

```{r}
wp_functional_map <-  tm_shape(NGA) + 
  tm_fill() + 
  tm_borders() + 
  tm_shape(wp_functional) +
  tm_dots(col = "status_clean",
         title = "Functional",
         palette = "darkblue",
         legend.show = FALSE) +
  tm_layout(title="Functional") +
  tm_view(set.view = 9) 
wp_nonfunctional_map <- tm_shape(NGA) + 
  tm_fill() + 
  tm_borders() + 
  tm_shape(wp_nonfunctional) +
  tm_dots(col = "status_clean",
         title = "Non-Functional",
         palette = "orange",
         legend.show = FALSE) +
  tm_layout(title="Non-Functional") +
  tm_view(set.view = 9) 


tmap_arrange(wp_functional_map, wp_nonfunctional_map,
             asp = 1,
             ncol = 2)
```

As **spatstat** needs its inputs to be of ***ppp*** object type, we need to convert the **Simple Feature** DataFrame to ***ppp***, which will be need to go through a few conversion.

```{r echo=FALSE}
pacman::p_load(DiagrammeR)
grViz(diagram = "digraph flowchart {
  node [fontname = arial, shape = oval]
  tab1 [label = '@@1']
  tab2 [label = '@@2']
  tab3 [label = '@@3']
  tab4 [label = '@@4']
  
  tab1 -> tab2 -> tab3 -> tab4;
}
  
  [1]: 'simple feature'
  [2]: 'spatial*'    
  [3]: 'generic spatial'   
  [4]: 'ppp'  
  ")
```

## Conversion of Datatypes

### **Converting sf data frames to sp's Spatial\* class**

```{r}
wp_functional_spatial <- as_Spatial(wp_functional)
wp_nonfunctional_spatial <- as_Spatial(wp_nonfunctional)
NGA_spatial <- as_Spatial(NGA)
```

### **Converting sp's Spatial\* Class into Generic sp Format**

```{r}
wp_functional_sp <- as(wp_functional_spatial, "SpatialPoints")
wp_nonfunctional_sp <- as(wp_nonfunctional_spatial, "SpatialPoints")
NGA_sp <- as(NGA_spatial, "SpatialPolygons")
```

### **Converting Generic sp Format into spatstat's ppp Format**

```{r}
wp_functional_ppp <- as(wp_functional_sp, "ppp")
wp_nonfunctional_ppp <- as(wp_nonfunctional_sp, "ppp")
```

Below shows the results of both functional and non-functional water points, using **ppp** object.

::: panel-tabset
#### Functional

```{r}
plot(wp_functional_ppp)
```

#### Non-Functional

```{r}
plot(wp_nonfunctional_ppp)
```
:::

### 

Check for Duplicate Data Points

Duplicated data points should be removed as processes under spatial point patterns analysis are largely assumed to be simple (i.e., no duplicated data).

```{r}
any(duplicated(wp_functional_ppp))
```

```{r}
any(duplicated(wp_nonfunctional_ppp))
```

## 

## **Creating *owin* Object**

```{r}
NGA_owin <- as(NGA_sp, "owin")
wp_functional_ppp = wp_functional_ppp[NGA_owin]
wp_nonfunctional_ppp = wp_nonfunctional_ppp[NGA_owin]
plot(NGA_owin)
```

## **Kernel Density Estimation (KDE)**

### **Computing KDE using Automatic Bandwidth Selection Method**

`bw.ppl()`Â is chosen as it highlights clusters more clearly compared to `bw.diggle()`, while not misleading resulted from using `bw.CvL()` or `bw.scott()`.

::: callout-warning
change the sigma and/or kernel to make the clusters more obvious
:::

```{r}
wp_functional_bw <- density(wp_functional_ppp,
                              sigma = bw.ppl,
                              edge = TRUE,
                              kernel = "gaussian")
plot(wp_functional_bw)
```

```{r}
wp_nonfunctional_bw <- density(wp_nonfunctional_ppp,
                              sigma = bw.ppl,
                              edge = TRUE,
                              kernel = "gaussian")
plot(wp_nonfunctional_bw)
```

We will need to rescale the KDE values as the current values will not be easily understood.

```{r}
wp_functional_ppp.km <- rescale(wp_functional_ppp, 1000, "km")
wp_nonfunctional_ppp.km <- rescale(wp_nonfunctional_ppp, 1000, "km")
```

```{r}

wp_functional_bw <- density(wp_functional_ppp.km,
                              sigma = bw.ppl,
                              edge = TRUE,
                              kernel = "gaussian")
plot(wp_functional_bw)
```

```{r}

wp_nonfunctional_bw <- density(wp_nonfunctional_ppp.km,
                              sigma = bw.ppl,
                              edge = TRUE,
                              kernel = "gaussian")
plot(wp_nonfunctional_bw)
```

```{r}
kde_wp_functional_adaptive <- adaptive.density(wp_functional_ppp.km, method = "kernel")
```

```{r}
kde_wp_nonfunctional_adaptive <- adaptive.density(wp_nonfunctional_ppp.km, method = "kernel")
```

```{r}
par(mfrow = c(1,2))
plot(kde_wp_functional_adaptive, main = "Functional")
plot(kde_wp_nonfunctional_adaptive, main = "Non-Functional")
```

```{r}
bw.diggle(wp_nonfunctional_ppp)
```

### **Converting KDE Output into Grid Object**

```{r}
gridded_wp_functional_bw <- as.SpatialGridDataFrame.im(wp_functional_bw)
spplot(gridded_wp_functional_bw)
```

```{r}
gridded_wp_nonfunctional_bw <- as.SpatialGridDataFrame.im(wp_nonfunctional_bw)
spplot(gridded_wp_nonfunctional_bw)
```

### **Converting Gridded Output into Raster**

```{r}
kde_wp_nonfunctional_bw_raster <- raster(gridded_wp_nonfunctional_bw)
projection(kde_wp_nonfunctional_bw_raster) <- CRS("+init=EPSG:26392")
kde_wp_nonfunctional_bw_raster
```

### **Visualising the Output in tmap**

```{r}
tm_shape(kde_wp_nonfunctional_bw_raster) +
  tm_raster("v") +
  tm_layout(legend.position = c("right", "bottom"), 
            frame = FALSE) +
  tm_basemap(leaflet::providers$OpenStreetMap)
```

```{r}

```

# **Second-order Spatial Point Patterns Analysis**

## **Analysing Spatial Point Process Using [L-Function]{.underline}**

### Functional Water Points

#### **Computing L-function estimation**

```{r}
L_wp_functional = Lest(wp_functional_ppp, correction = "Ripley")
plot(L_wp_functional, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```

#### **Performing Complete Spatial Randomness Test**

-   Ho = The distribution of functional water points at Osun are randomly distributed.

-   H1= The distribution of functional water points at Osun are not randomly distributed.

```{r}
L_functional.csr <- envelope(wp_functional_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

### Non-Functional Water Points

#### **Computing L-function estimation**

```{r}
L_wp_nonfunctional = Lest(wp_nonfunctional_ppp, correction = "Ripley")
plot(L_wp_nonfunctional, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```

#### **Performing Complete Spatial Randomness Test**

-   Ho = The distribution of non-functional water points at Osun are randomly distributed.

-   H1= The distribution of non-functional water points at Osun are not randomly distributed.

```{r}
L_nonfunctional.csr <- envelope(wp_nonfunctional_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

# Spatial Correlation Analysis

```{r}
wp_neighbours <- include_self(
  st_knn(st_geometry(wp_sf_nga), 6) 
)

wp_weights <- st_kernel_weights(wp_neighbours,
                        wp_sf_nga,
                        "gaussian",
                        adaptive = TRUE)
```

```{r}
LCLQ <- local_colocation(wp_functional, wp_nonfunctional, nb, wt, 39)
```

```{r}
LCLQ_wp <- cbind(wp_sf_nga, LCLQ)
```

```{r}
#tmap_mode("view")
#tm_shape(NGA) +
 # tm_polygons() +
#tm_shape(LCLQ_wp) +
 # tm_dots(col = "X7.Eleven",
   #       size = 0.01,
  #        border.col = "black",
   #      border.lwd = 0.5) +
# tm_view(set.zoom.limits = c(12,16))
#tmap_mode("plot")
```
