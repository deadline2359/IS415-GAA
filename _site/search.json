[
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#dataset-sources",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#dataset-sources",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "1.1 Dataset Sources",
    "text": "1.1 Dataset Sources\n\nWPdx+ Dataset (CSV) - Taken from WPdx Global Data Repositories. It provides the locations of the water points.\nState boundary GIS Datasets of Nigeria - Taken from Humanitarian Data Exchange. It gives the geospatial data of Nigeria, in particular the boundaries of its states and Local Government Areas (LGA)."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#wpdx-dataset",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#wpdx-dataset",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "3.1 WPdx+ Dataset",
    "text": "3.1 WPdx+ Dataset\nSince we are only analysing Osun’s water points, we will directly filter the water points by the country and state.\n\nImportingDataset\n\n\n\nwp_osun <- read_csv(\"data/aspatial/Water_Point_Data_Exchange_-_Plus__WPdx__.csv\") %>% filter(`#clean_country_name` == \"Nigeria\" &\n                                                                                              `#clean_adm1` == \"Osun\")\n\n\n\n\nhead(wp_osun, n=5)\n\n# A tibble: 5 × 70\n  row_id #sour…¹ #lat_…² #lon_…³ #repo…⁴ #stat…⁵ #wate…⁶ #wate…⁷ #wate…⁸ #wate…⁹\n   <dbl> <chr>     <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n1 429123 GRID3      8.02    5.06 08/29/… Unknown <NA>    <NA>    Tapsta… Tapsta…\n2  70566 Federa…    7.32    4.79 05/11/… No      Protec… Well    Mechan… Mechan…\n3  70578 Federa…    7.76    4.56 05/11/… No      Boreho… Well    Mechan… Mechan…\n4  66401 Federa…    8.03    4.64 04/30/… No      Boreho… Well    Mechan… Mechan…\n5 422190 GRID3      7.87    4.88 08/29/… Unknown <NA>    <NA>    Tapsta… Tapsta…\n# … with 60 more variables: `#facility_type` <chr>,\n#   `#clean_country_name` <chr>, `#clean_adm1` <chr>, `#clean_adm2` <chr>,\n#   `#clean_adm3` <chr>, `#clean_adm4` <chr>, `#install_year` <dbl>,\n#   `#installer` <chr>, `#rehab_year` <lgl>, `#rehabilitator` <lgl>,\n#   `#management_clean` <chr>, `#status_clean` <chr>, `#pay` <chr>,\n#   `#fecal_coliform_presence` <chr>, `#fecal_coliform_value` <dbl>,\n#   `#subjective_quality` <chr>, `#activity_id` <chr>, `#scheme_id` <chr>, …"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#nigeria-osun-state",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#nigeria-osun-state",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "3.2 Nigeria Osun State",
    "text": "3.2 Nigeria Osun State\nAs the geospatial data of Nigeria is being imported as a Simple Feature DataFrame, we want to ensure that the dataframe is projected in the right ESPG codes (i.e., 26391, 26392, 26393).\n\nImportingDataset\n\n\n\nNGA <- st_read(dsn = \"data/geospatial/nga_adm_osgof_20190417\",\n               layer = \"nga_admbnda_adm2_osgof_20190417\") %>%\n  st_transform(crs = 26392)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `C:\\deadline2359\\IS415-GAA\\Take-home_Ex\\Take-home_Ex01\\data\\geospatial\\nga_adm_osgof_20190417' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\n\n\n\nhead(NGA, n=5)\n\nSimple feature collection with 5 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 481088 ymin: 98142.39 xmax: 1248985 ymax: 1079710\nProjected CRS: Minna / Nigeria Mid Belt\n  Shape_Leng  Shape_Area   ADM2_EN ADM2_PCODE  ADM2_REF ADM2ALT1EN ADM2ALT2EN\n1  0.2370744 0.001523921 Aba North   NG001001 Aba North       <NA>       <NA>\n2  0.2624772 0.003531104 Aba South   NG001002 Aba South       <NA>       <NA>\n3  3.0753158 0.326867840    Abadam   NG008001    Abadam       <NA>       <NA>\n4  2.5379842 0.068378506     Abaji   NG015001     Abaji       <NA>       <NA>\n5  0.6871498 0.014528691      Abak   NG003001      Abak       <NA>       <NA>\n                    ADM1_EN ADM1_PCODE ADM0_EN ADM0_PCODE       date    validOn\n1                      Abia      NG001 Nigeria         NG 2016-11-29 2019-04-17\n2                      Abia      NG001 Nigeria         NG 2016-11-29 2019-04-17\n3                     Borno      NG008 Nigeria         NG 2016-11-29 2019-04-17\n4 Federal Capital Territory      NG015 Nigeria         NG 2016-11-29 2019-04-17\n5                 Akwa Ibom      NG003 Nigeria         NG 2016-11-29 2019-04-17\n  validTo                     SD_EN SD_PCODE                       geometry\n1    <NA>                Abia South  NG00103 MULTIPOLYGON (((548795.5 11...\n2    <NA>                Abia South  NG00103 MULTIPOLYGON (((547286.1 11...\n3    <NA>               Borno North  NG00802 MULTIPOLYGON (((1248985 104...\n4    <NA> Federal Capital Territory  NG01501 MULTIPOLYGON (((510864.9 57...\n5    <NA>      Akwa Ibom North West  NG00302 MULTIPOLYGON (((594269 1209..."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#wpdx-dataset-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#wpdx-dataset-1",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "4.1 WPdx+ Dataset",
    "text": "4.1 WPdx+ Dataset\nHere, st_as_sfc() converts the column “New Georeferenced Column” in the WPdx+ dataset, which references the water points’ locations, into a Simple Feature geometry Column.\n\nwp_osun$Geometry = st_as_sfc(wp_osun$`New Georeferenced Column`)\nhead(wp_osun, 5)\n\n# A tibble: 5 × 71\n  row_id #sour…¹ #lat_…² #lon_…³ #repo…⁴ #stat…⁵ #wate…⁶ #wate…⁷ #wate…⁸ #wate…⁹\n   <dbl> <chr>     <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n1 429123 GRID3      8.02    5.06 08/29/… Unknown <NA>    <NA>    Tapsta… Tapsta…\n2  70566 Federa…    7.32    4.79 05/11/… No      Protec… Well    Mechan… Mechan…\n3  70578 Federa…    7.76    4.56 05/11/… No      Boreho… Well    Mechan… Mechan…\n4  66401 Federa…    8.03    4.64 04/30/… No      Boreho… Well    Mechan… Mechan…\n5 422190 GRID3      7.87    4.88 08/29/… Unknown <NA>    <NA>    Tapsta… Tapsta…\n# … with 61 more variables: `#facility_type` <chr>,\n#   `#clean_country_name` <chr>, `#clean_adm1` <chr>, `#clean_adm2` <chr>,\n#   `#clean_adm3` <chr>, `#clean_adm4` <chr>, `#install_year` <dbl>,\n#   `#installer` <chr>, `#rehab_year` <lgl>, `#rehabilitator` <lgl>,\n#   `#management_clean` <chr>, `#status_clean` <chr>, `#pay` <chr>,\n#   `#fecal_coliform_presence` <chr>, `#fecal_coliform_value` <dbl>,\n#   `#subjective_quality` <chr>, `#activity_id` <chr>, `#scheme_id` <chr>, …\n\n\n\n4.1.0.1 Create Simple Feature DataFrame\nst_sf() then converts wp_osun from a tibble to a Simple Feature DataFrame.\n\nwp_sf <- st_sf(wp_osun, crs=4326)\nhead(wp_sf, 5)\n\nSimple feature collection with 5 features and 70 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4.563998 ymin: 7.317741 xmax: 5.06 ymax: 8.031187\nGeodetic CRS:  WGS 84\n# A tibble: 5 × 71\n  row_id #sour…¹ #lat_…² #lon_…³ #repo…⁴ #stat…⁵ #wate…⁶ #wate…⁷ #wate…⁸ #wate…⁹\n   <dbl> <chr>     <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n1 429123 GRID3      8.02    5.06 08/29/… Unknown <NA>    <NA>    Tapsta… Tapsta…\n2  70566 Federa…    7.32    4.79 05/11/… No      Protec… Well    Mechan… Mechan…\n3  70578 Federa…    7.76    4.56 05/11/… No      Boreho… Well    Mechan… Mechan…\n4  66401 Federa…    8.03    4.64 04/30/… No      Boreho… Well    Mechan… Mechan…\n5 422190 GRID3      7.87    4.88 08/29/… Unknown <NA>    <NA>    Tapsta… Tapsta…\n# … with 61 more variables: `#facility_type` <chr>,\n#   `#clean_country_name` <chr>, `#clean_adm1` <chr>, `#clean_adm2` <chr>,\n#   `#clean_adm3` <chr>, `#clean_adm4` <chr>, `#install_year` <dbl>,\n#   `#installer` <chr>, `#rehab_year` <lgl>, `#rehabilitator` <lgl>,\n#   `#management_clean` <chr>, `#status_clean` <chr>, `#pay` <chr>,\n#   `#fecal_coliform_presence` <chr>, `#fecal_coliform_value` <dbl>,\n#   `#subjective_quality` <chr>, `#activity_id` <chr>, `#scheme_id` <chr>, …\n\n\n\n\n4.1.0.2 Re-Projection\nLike in importing the geospatial data of Nigeria Osun State, st_transform() is used to re-project the geographic coordinate system to projected coordinate system as the projected coordinate system allows for better analysis involving measurements.\n\nwp_sf <- wp_sf %>%\n  st_transform(crs = 26392)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#filtering-redundant-fields",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#filtering-redundant-fields",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "5.1 Filtering Redundant Fields",
    "text": "5.1 Filtering Redundant Fields\nLooking at Nigeria’s state boundary Dataset, there are many fields and rows that not necessary for our project. Hence, we will filter for those of Osun, and select only “ADM1_EN” and “ADM2_EN” fields which hold information on 1st and 2nd level administrative zones.\n\nNGA <- NGA  %>%\n  filter(`ADM1_EN` == \"Osun\") %>%\n  dplyr::select(c(3:4, 8:9))\nhead(NGA, 5)\n\nSimple feature collection with 5 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 189625.6 ymin: 338755.8 xmax: 272238.5 ymax: 447175.5\nProjected CRS: Minna / Nigeria Mid Belt\n         ADM2_EN ADM2_PCODE ADM1_EN ADM1_PCODE                       geometry\n1       Aiyedade   NG030001    Osun      NG030 MULTIPOLYGON (((213526.6 34...\n2       Aiyedire   NG030002    Osun      NG030 MULTIPOLYGON (((212542.6 40...\n3 Atakumosa East   NG030003    Osun      NG030 MULTIPOLYGON (((265746.8 37...\n4 Atakumosa West   NG030004    Osun      NG030 MULTIPOLYGON (((248871.4 40...\n5     Boluwaduro   NG030005    Osun      NG030 MULTIPOLYGON (((266092.2 43..."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#checking-for-duplicated-name",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#checking-for-duplicated-name",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "5.2 Checking for Duplicated Name",
    "text": "5.2 Checking for Duplicated Name\nYou can see that there is no duplicated LGA in the Osun state.\n\nNGA$ADM2_EN[duplicated(NGA$ADM2_EN) == TRUE]\n\ncharacter(0)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#excluding-unnecessary-data-points",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#excluding-unnecessary-data-points",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "5.3 Excluding Unnecessary Data Points",
    "text": "5.3 Excluding Unnecessary Data Points\nst_intersection() is particularly chosen to exclude coordinate points which the water points’ locations do not overlap with Osun state’s geography. If we are to use wp_sf as it is, we may include water points not actually in Osun due to data errors.\n\nwp_sf <- st_intersection(NGA, wp_sf)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#extract-water-point-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#extract-water-point-data",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "6.1 Extract Water Point Data",
    "text": "6.1 Extract Water Point Data\nIn the two code chunks below, we focus on splitting the functional, non-functional and unknown water points so further analysis can be done on the different groups.\n\nwp_functional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nwp_nonfunctional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Abandoned/Decommissioned\",\n             \"Abandoned\",\n             \"Non-Functional due to dry season\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\"))\n\n\nwp_unknown <- wp_sf_nga %>%\n  filter(status_clean == \"unknown\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#performing-point-in-polygon-count",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#performing-point-in-polygon-count",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "6.2 Performing Point-in-Polygon Count",
    "text": "6.2 Performing Point-in-Polygon Count\nUsing st_intersects(), we want to know if the geospatial coordinates of Osun intersect with the geospatial coordinates of the water points. If yes, the dataframe NGA_wp will get the total number of functional, non-functional, unknown and overall water points in each 2nd administrative zone.\n\nNGA_wp <- NGA %>%\n  mutate('total_wp' = lengths(\n    st_intersects(NGA, wp_sf_nga))) %>%\n  mutate('wp_functional' = lengths(\n    st_intersects(NGA, wp_functional))) %>%\n  mutate('wp_nonfunctional' = lengths(\n    st_intersects(NGA, wp_nonfunctional))) %>%\n  mutate('wp_unknown' = lengths(\n    st_intersects(NGA, wp_unknown)))\nhead(NGA_wp, 5)\n\nSimple feature collection with 5 features and 8 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 189625.6 ymin: 338755.8 xmax: 272238.5 ymax: 447175.5\nProjected CRS: Minna / Nigeria Mid Belt\n         ADM2_EN ADM2_PCODE ADM1_EN ADM1_PCODE                       geometry\n1       Aiyedade   NG030001    Osun      NG030 MULTIPOLYGON (((213526.6 34...\n2       Aiyedire   NG030002    Osun      NG030 MULTIPOLYGON (((212542.6 40...\n3 Atakumosa East   NG030003    Osun      NG030 MULTIPOLYGON (((265746.8 37...\n4 Atakumosa West   NG030004    Osun      NG030 MULTIPOLYGON (((248871.4 40...\n5     Boluwaduro   NG030005    Osun      NG030 MULTIPOLYGON (((266092.2 43...\n  total_wp wp_functional wp_nonfunctional wp_unknown\n1      389           157              154         78\n2      175            89               57         29\n3      223            98               92         33\n4      246           111              103         32\n5      129            63               51         15\n\n\nFrom the chart below, we can see that most of LGAs have around 100 to 150 water points. However, looking closer at each group, most LGAs tend to have slightly more functional than non-functional water points.\n\nTotalFunctionalNon-FunctionalUnknown\n\n\n\nggplot(data = NGA_wp,\n       aes(x = total_wp)) + \n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\") +\n  geom_vline(aes(xintercept=mean(\n    total_wp, na.rm=T)),\n             color=\"red\", \n             linetype=\"dashed\", \n             size=0.8) +\n  ggtitle(\"Distribution of total water points by LGA\") +\n  xlab(\"No. of water points\") +\n  ylab(\"No. of\\nLGAs\") +\n  theme(axis.title.y=element_text(angle = 0))\n\n\n\n\n\n\n\nggplot(data = NGA_wp,\n       aes(x = wp_functional)) + \n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"dark blue\") +\n  geom_vline(aes(xintercept=mean(\n    wp_functional, na.rm=T)),\n             color=\"red\", \n             linetype=\"dashed\", \n             size=0.8) +\n  ggtitle(\"Distribution of functional water points by LGA\") +\n  xlab(\"No. of water points\") +\n  ylab(\"No. of\\nLGAs\") +\n  theme(axis.title.y=element_text(angle = 0))\n\n\n\n\n\n\n\nggplot(data = NGA_wp,\n       aes(x = wp_nonfunctional)) + \n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"orange\") +\n  geom_vline(aes(xintercept=mean(\n    wp_nonfunctional, na.rm=T)),\n             color=\"red\", \n             linetype=\"dashed\", \n             size=0.8) +\n  ggtitle(\"Distribution of non-functional water points by LGA\") +\n  xlab(\"No. of water points\") +\n  ylab(\"No. of\\nLGAs\") +\n  theme(axis.title.y=element_text(angle = 0))\n\n\n\n\n\n\n\nggplot(data = NGA_wp,\n       aes(x = wp_unknown)) + \n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"grey\") +\n  geom_vline(aes(xintercept=mean(\n    wp_unknown, na.rm=T)),\n             color=\"red\", \n             linetype=\"dashed\", \n             size=0.8) +\n  ggtitle(\"Distribution of unknown water points by LGA\") +\n  xlab(\"No. of water points\") +\n  ylab(\"No. of\\nLGAs\") +\n  theme(axis.title.y=element_text(angle = 0))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#conversion-of-datatypes",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#conversion-of-datatypes",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "7.1 Conversion of Datatypes",
    "text": "7.1 Conversion of Datatypes\n\n7.1.1 Converting sf data frames to sp’s Spatial* class\n\nwp_functional_spatial <- as_Spatial(wp_functional)\nwp_nonfunctional_spatial <- as_Spatial(wp_nonfunctional)\nwp_nonunknown_spatial <- as_Spatial(wp_nonunknown)\nNGA_spatial <- as_Spatial(NGA)\n\n\n\n7.1.2 Converting sp’s Spatial* Class into Generic sp Format\n\nwp_functional_sp <- as(wp_functional_spatial, \"SpatialPoints\")\nwp_nonfunctional_sp <- as(wp_nonfunctional_spatial, \"SpatialPoints\")\nwp_nonunknown_sp <- as(wp_nonunknown_spatial, \"SpatialPoints\")\nNGA_sp <- as(NGA_spatial, \"SpatialPolygons\")\n\n\n\n7.1.3 Converting Generic sp Format into spatstat’s ppp Format\n\nwp_functional_ppp <- as(wp_functional_sp, \"ppp\")\nwp_nonfunctional_ppp <- as(wp_nonfunctional_sp, \"ppp\")\nwp_nonunknown_ppp <- as(wp_nonunknown_sp, \"ppp\")\n\nBelow shows the results of both functional and non-functional water points, using ppp object. We already start to better see where the concentrations of water points are.\n\nAll excluding unknownFunctionalNon-Functional\n\n\n\nplot(wp_nonunknown_ppp, main=\"Water Points \\n(excluding missing data)\")\n\n\n\n\n\n\n\nplot(wp_functional_ppp, main=\"Functional Water Points\")\n\n\n\n\n\n\n\nplot(wp_nonfunctional_ppp, main=\"Non-Functional Water Points\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#check-for-duplicate-data-points",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#check-for-duplicate-data-points",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "7.2 Check for Duplicate Data Points",
    "text": "7.2 Check for Duplicate Data Points\nDuplicated data points should be removed as processes under spatial point patterns analysis are largely assumed to be simple (i.e., no duplicated data). The below code chunk will check if any duplicated data point is in our ppp objects.\n\nany(duplicated(wp_functional_ppp))\n\n[1] FALSE\n\n\n\nany(duplicated(wp_nonfunctional_ppp))\n\n[1] FALSE"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#creating-owin-object",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#creating-owin-object",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "7.3 Creating owin Object",
    "text": "7.3 Creating owin Object\nAn owin object will be created to assist us in confining the data points to only Osun.\n\nNGA_owin <- as(NGA_sp, \"owin\")\nwp_functional_ppp = wp_functional_ppp[NGA_owin]\nwp_nonfunctional_ppp = wp_nonfunctional_ppp[NGA_owin]\nwp_nonunknown_ppp = wp_nonunknown_ppp[NGA_owin]\nplot(NGA_owin)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#kernel-density-estimation-kde",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#kernel-density-estimation-kde",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "7.4 Kernel Density Estimation (KDE)",
    "text": "7.4 Kernel Density Estimation (KDE)\nWe will need to rescale the KDE values as the current values in meters will not be easily understood.\n\nwp_functional_ppp.km <- rescale(wp_functional_ppp, 1000, \"km\")\nwp_nonfunctional_ppp.km <- rescale(wp_nonfunctional_ppp, 1000, \"km\")\nwp_nonunknown_ppp.km <- rescale(wp_nonunknown_ppp, 1000, \"km\")\n\n\n7.4.1 Computing KDE using Automatic Bandwidth Selection Method\nbw.ppl() is chosen as it highlights clusters more clearly compared to bw.diggle(), while being not misleading like the huge area highlighted resulted from using bw.CvL() or bw.scott().\n\n7.4.1.1 All excluding unknown\n\nwp_nonunknown_bw <- density(wp_nonunknown_ppp.km,\n                              sigma = bw.ppl,\n                              edge = TRUE,\n                              kernel = \"epanechnikov\")\nplot(wp_nonunknown_bw)\n\n\n\n\n\n\n7.4.1.2 Functional\n\nwp_functional_bw <- density(wp_functional_ppp.km,\n                              sigma = bw.ppl,\n                              edge = TRUE,\n                              kernel = \"epanechnikov\")\nplot(wp_functional_bw)\n\n\n\n\n\n\n7.4.1.3 Non-Functional\n\nwp_nonfunctional_bw <- density(wp_nonfunctional_ppp.km,\n                              sigma = bw.ppl,\n                              edge = TRUE,\n                              kernel = \"epanechnikov\")\nplot(wp_nonfunctional_bw)\n\n\n\n\n\n\n\n7.4.2 Converting KDE Output into Grid Object\n\n7.4.2.1 All excluding unknown\n\ngridded_wp_nonunknown_bw <- as.SpatialGridDataFrame.im(wp_nonunknown_bw)\nspplot(gridded_wp_nonunknown_bw)\n\n\n\n\n\n\n7.4.2.2 Functional Water Points\n\ngridded_wp_functional_bw <- as.SpatialGridDataFrame.im(wp_functional_bw)\nspplot(gridded_wp_functional_bw)\n\n\n\n\n\n\n7.4.2.3 Non-Functional Water Points\n\ngridded_wp_nonfunctional_bw <- as.SpatialGridDataFrame.im(wp_nonfunctional_bw)\nspplot(gridded_wp_nonfunctional_bw)\n\n\n\n\n\n\n\n7.4.3 Converting Gridded Output into Raster\nAs we want to use tmap to showcase a raster map, the CRS is added to the object.\n\nkde_wp_functional_bw_raster <- raster(gridded_wp_functional_bw)\nprojection(kde_wp_functional_bw_raster) <- CRS(\"+init=EPSG:26392\")\nkde_wp_functional_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:26392 \nsource     : memory\nnames      : v \nvalues     : -1.671786e-15, 9.409052  (min, max)\n\n\n\nkde_wp_nonfunctional_bw_raster <- raster(gridded_wp_nonfunctional_bw)\nprojection(kde_wp_nonfunctional_bw_raster) <- CRS(\"+init=EPSG:26392\")\nkde_wp_nonfunctional_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:26392 \nsource     : memory\nnames      : v \nvalues     : -1.306349e-15, 8.406528  (min, max)\n\n\n\n\n7.4.4 Visualising the Output in tmap\n\n7.4.4.1 Functional\n\ntmap_mode(\"view\") +\ntm_basemap('OpenStreetMap') +\ntm_shape(kde_wp_functional_bw_raster) +\n  tm_raster(\"v\") \n\n\n\n\ntmap_mode(\"plot\")\n\n\n\n7.4.4.2 Non-Functional\n\ntmap_mode(\"view\") +\ntm_basemap('OpenStreetMap') +\ntm_shape(kde_wp_nonfunctional_bw_raster) +\n  tm_raster(\"v\") \n\n\n\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#advantages-of-kernel-density-map-over-point-map",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#advantages-of-kernel-density-map-over-point-map",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "7.5 Advantages of Kernel Density Map over Point Map",
    "text": "7.5 Advantages of Kernel Density Map over Point Map\n\nVisually, clusters are more visible in kernel density maps, compared to point maps where concentrated points overlapped each other. This is due to KDE is able to smooth the concentrations of points and create a surface fitted over these points. Whereas point maps simply accept that data points are already spreaded out, else those of same or similar coordinates will be depicted overlapped together.\nThe inverse distance weights calculated to generate the kernel density maps can be seen visually in the deeper colours closer to the centre of clusters. In Osun, there are few clusterings observed and each cluster in rather small-size compared to the large landmass of the state. Residents who reside closer to the centre of these cluster will no doubt need to travel less to water points than residents living at the edge or even outside of these clusters."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#analysing-spatial-point-process-using-l-function",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#analysing-spatial-point-process-using-l-function",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "8.1 Analysing Spatial Point Process Using L-Function",
    "text": "8.1 Analysing Spatial Point Process Using L-Function\nTo conduct our second-order spatial point patterns analysis, we are opting to use Besag’s L-Function. It is a normalised Ripley’s K-Function, which measures the distances between a point and its neighbours within each radius.\nUsing the envelope() of spatstat package, Monte Carlo simulations have be developed to observe the randomness of the water points.\nAt 95% confident interval, we will set nsim to be 39 and reject the null hypothesis if the p-value is small than the alpha value of 0.05.\n\n8.1.1 Functional Water Points\n\n8.1.1.1 Computing L-function estimation\n\nL_wp_functional = Lest(wp_functional_ppp.km, correction = \"Ripley\")\nplot(L_wp_functional, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", main=\"Functional Water Points\")\n\n\n\n\n8.1.1.2 Performing Complete Spatial Randomness Test\n\nHo = The distribution of functional water points at Osun are randomly distributed.\nH1 = The distribution of functional water points at Osun are not randomly distributed.\n\nHaving L(r)>0 (i.e., the line) above break line and the upper confidence envelop, the null hypothesis is rejected and accept the hypothesis that functional water points are not distributed randomly.\n\nL_functional.csr <- envelope(wp_functional_ppp, Lest, nsim = 39, rank = 1, glocal=TRUE)\nplot(L_functional.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\", main=\"Functional Water Points\")\n\n\n\n\n\n\n\n\nImportant\n\n\n\nDue to inputting the wrong variable, you will notice the scale is in meters, rather than the intended kilometers like the graph in 8.1.1.1 Computing L-function estimation.\n\n\n\n\n\n8.1.2 Non-Functional Water Points\n\n8.1.2.1 Computing L-function estimation\n\nL_wp_nonfunctional = Lest(wp_nonfunctional_ppp.km, correction = \"Ripley\")\nplot(L_wp_nonfunctional, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", main=\"Non-Functional Water Points\")\n\n\n\n\n8.1.2.2 Performing Complete Spatial Randomness Test\n\nHo = The distribution of non-functional water points at Osun are randomly distributed.\nH1 = The distribution of non-functional water points at Osun are not randomly distributed.\n\nSimilarly, we can observe that the line is way above the upper confidence envelop. We can safely reject the null hypothesis and understand that the spatial clustering is significant.\n\nL_nonfunctional.csr <- envelope(wp_nonfunctional_ppp, Lest, nsim = 39, rank = 1, glocal=TRUE)\nplot(L_nonfunctional.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\", main=\"Non-Functional Water Points\")\n\n\n\n\n\n\n\n\nImportant\n\n\n\nSimilar to 8.1.1.2 Performing Complete Spatial Randomness Test in depicting functional water points, the scale is in meters, instead of kilometers."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#conversion-of-datatypes-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#conversion-of-datatypes-1",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "9.1 Conversion of Datatypes",
    "text": "9.1 Conversion of Datatypes\n\n9.1.1 Converting sf data frames to sp’s Spatial* class\n\nLCLQ_wp_spatial <- as_Spatial(LCLQ_wp)\n\n\n\n9.1.2 Converting sp’s Spatial* Class into Generic sp Format\n\nLCLQ_wp_sp <- as(LCLQ_wp_spatial, \"SpatialPoints\")\n\n\n\n9.1.3 Converting Generic sp Format into spatstat’s ppp Format\n\nLCLQ_wp_ppp <- as(LCLQ_wp_sp, \"ppp\")\n\nBelow shows the results of both functional and non-functional water points, using ppp object.\n\nplot(LCLQ_wp_ppp)\n\n\n\n\n\nLCLQ_wp_ppp.km <- rescale(LCLQ_wp_ppp, 1000, \"km\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#analysing-spatial-point-process-using-l-function-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#analysing-spatial-point-process-using-l-function-1",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "9.2 Analysing Spatial Point Process Using L-Function",
    "text": "9.2 Analysing Spatial Point Process Using L-Function\n\nL_LCLQ_wp = Lest(LCLQ_wp_ppp.km, correction = \"Ripley\")\nplot(L_LCLQ_wp, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", main=\"LCLQ of Water Points\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#performing-complete-spatial-randomness-test-2",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#performing-complete-spatial-randomness-test-2",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "9.3 Performing Complete Spatial Randomness Test",
    "text": "9.3 Performing Complete Spatial Randomness Test\n\nHo = The spatial distribution of functional and non-functional water points are independent from each other.\nH1 = The spatial distribution of functional and non-functional water points are not independent from each other.\n\nThe L value is observed to be greater than the break line and above the upper confidence envelop. Hence the null hypothesis is rejected and we will assume that the spatial distribution of functional and non-functional water points are not independent from each other.\n\nLCLQ_wp.csr <- envelope(LCLQ_wp_ppp.km, Lest, nsim = 39, rank = 1, glocal=TRUE)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\nplot(LCLQ_wp.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")"
  }
]