[
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "",
    "text": "pacman::p_load(sf, tidyverse, funModeling, tmap, spatstat, maptools)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#wpdx-dataset",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#wpdx-dataset",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "2.1 WPdx+ Dataset",
    "text": "2.1 WPdx+ Dataset\n\nwp_osun <- read_csv(\"data/aspatial/Water_Point_Data_Exchange_-_Plus__WPdx__.csv\") %>% filter(`#clean_country_name` == \"Nigeria\" &\n                                                                                              `#clean_adm1` == \"Osun\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#nigeria-osun-state",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#nigeria-osun-state",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "2.2 Nigeria Osun State",
    "text": "2.2 Nigeria Osun State\n\nNGA <- st_read(dsn = \"data/geospatial/nga_adm_osgof_20190417\",\n               layer = \"nga_admbnda_adm2_osgof_20190417\") %>%\n  st_transform(crs = 26392)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `C:\\deadline2359\\IS415-GAA\\Take-home_Ex\\Take-home_Ex01\\data\\geospatial\\nga_adm_osgof_20190417' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#wpdx-dataset-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#wpdx-dataset-1",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "3.1 WPdx+ Dataset",
    "text": "3.1 WPdx+ Dataset\n\nwp_osun$Geometry = st_as_sfc(wp_osun$`New Georeferenced Column`)\nwp_osun\n\n# A tibble: 5,557 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n    <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429123 GRID3             8.02    5.06 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2  70566 Federal Minis…    7.32    4.79 05/11/… No      Protec… Well    Mechan…\n 3  70578 Federal Minis…    7.76    4.56 05/11/… No      Boreho… Well    Mechan…\n 4  66401 Federal Minis…    8.03    4.64 04/30/… No      Boreho… Well    Mechan…\n 5 422190 GRID3             7.87    4.88 08/29/… Unknown <NA>    <NA>    Tapsta…\n 6 422064 GRID3             7.7     4.89 08/29/… Unknown <NA>    <NA>    Tapsta…\n 7  65607 Federal Minis…    7.89    4.71 05/12/… No      Boreho… Well    Mechan…\n 8  68989 Federal Minis…    7.51    4.27 05/07/… No      Boreho… Well    <NA>   \n 9  67708 Federal Minis…    7.48    4.35 04/29/… Yes     Boreho… Well    Mechan…\n10  66419 Federal Minis…    7.63    4.50 05/08/… Yes     Boreho… Well    Hand P…\n# … with 5,547 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\n\n3.1.0.1 Create Simple Feature DataFrame\n\nwp_sf <- st_sf(wp_osun, crs=4326)\n\n\nwp_sf <- wp_sf %>%\n  st_transform(crs = 26392)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#excluding-redundant-fields",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#excluding-redundant-fields",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "4.1 Excluding Redundant Fields",
    "text": "4.1 Excluding Redundant Fields\n\nNGA <- NGA  %>%\n  filter(`ADM1_EN` == \"Osun\") %>%\n  select(c(3:4, 8:9))\nNGA\n\nSimple feature collection with 30 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 176503.2 ymin: 331434.7 xmax: 291043.8 ymax: 454520.1\nProjected CRS: Minna / Nigeria Mid Belt\nFirst 10 features:\n          ADM2_EN ADM2_PCODE ADM1_EN ADM1_PCODE                       geometry\n1        Aiyedade   NG030001    Osun      NG030 MULTIPOLYGON (((213526.6 34...\n2        Aiyedire   NG030002    Osun      NG030 MULTIPOLYGON (((212542.6 40...\n3  Atakumosa East   NG030003    Osun      NG030 MULTIPOLYGON (((265746.8 37...\n4  Atakumosa West   NG030004    Osun      NG030 MULTIPOLYGON (((248871.4 40...\n5      Boluwaduro   NG030005    Osun      NG030 MULTIPOLYGON (((266092.2 43...\n6          Boripe   NG030006    Osun      NG030 MULTIPOLYGON (((255072.5 43...\n7       Ede North   NG030007    Osun      NG030 MULTIPOLYGON (((236386.9 41...\n8       Ede South   NG030008    Osun      NG030 MULTIPOLYGON (((236386.9 41...\n9        Egbedore   NG030009    Osun      NG030 MULTIPOLYGON (((220756 4317...\n10         Ejigbo   NG030010    Osun      NG030 MULTIPOLYGON (((214422.1 42..."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#checking-for-duplicated-name",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#checking-for-duplicated-name",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "4.2 Checking for Duplicated Name",
    "text": "4.2 Checking for Duplicated Name\nYou can see that no duplicated LGAs in the Osun state.\n\nNGA$ADM2_EN[duplicated(NGA$ADM2_EN) == TRUE]\n\ncharacter(0)\n\n\n\nwp_sf <- st_intersection(NGA, wp_sf)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#extract-water-point-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#extract-water-point-data",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "5.1 Extract Water Point Data",
    "text": "5.1 Extract Water Point Data\n\nwp_functional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nwp_nonfunctional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Abandoned/Decommissioned\",\n             \"Abandoned\",\n             \"Non-Functional due to dry season\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\"))\n\n\nwp_unknown <- wp_sf_nga %>%\n  filter(status_clean == \"unknown\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#performing-point-in-polygon-count",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#performing-point-in-polygon-count",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "5.2 Performing Point-in-Polygon Count",
    "text": "5.2 Performing Point-in-Polygon Count\n\nNGA_wp <- NGA %>%\n  mutate('total_wp' = lengths(\n    st_intersects(NGA, wp_sf_nga))) %>%\n  mutate('wp_functional' = lengths(\n    st_intersects(NGA, wp_functional))) %>%\n  mutate('wp_nonfunctional' = lengths(\n    st_intersects(NGA, wp_nonfunctional))) %>%\n  mutate('wp_unknown' = lengths(\n    st_intersects(NGA, wp_unknown)))\nNGA_wp\n\nSimple feature collection with 30 features and 8 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 176503.2 ymin: 331434.7 xmax: 291043.8 ymax: 454520.1\nProjected CRS: Minna / Nigeria Mid Belt\nFirst 10 features:\n          ADM2_EN ADM2_PCODE ADM1_EN ADM1_PCODE                       geometry\n1        Aiyedade   NG030001    Osun      NG030 MULTIPOLYGON (((213526.6 34...\n2        Aiyedire   NG030002    Osun      NG030 MULTIPOLYGON (((212542.6 40...\n3  Atakumosa East   NG030003    Osun      NG030 MULTIPOLYGON (((265746.8 37...\n4  Atakumosa West   NG030004    Osun      NG030 MULTIPOLYGON (((248871.4 40...\n5      Boluwaduro   NG030005    Osun      NG030 MULTIPOLYGON (((266092.2 43...\n6          Boripe   NG030006    Osun      NG030 MULTIPOLYGON (((255072.5 43...\n7       Ede North   NG030007    Osun      NG030 MULTIPOLYGON (((236386.9 41...\n8       Ede South   NG030008    Osun      NG030 MULTIPOLYGON (((236386.9 41...\n9        Egbedore   NG030009    Osun      NG030 MULTIPOLYGON (((220756 4317...\n10         Ejigbo   NG030010    Osun      NG030 MULTIPOLYGON (((214422.1 42...\n   total_wp wp_functional wp_nonfunctional wp_unknown\n1       389           157              154         78\n2       175            89               57         29\n3       223            98               92         33\n4       246           111              103         32\n5       129            63               51         15\n6       177            79               85         13\n7       216           141               50         25\n8       146            72               39         35\n9       142            63               44         35\n10      434           274              126         34\n\n\n\nggplot(data = NGA_wp,\n       aes(x = total_wp)) + \n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\") +\n  geom_vline(aes(xintercept=mean(\n    total_wp, na.rm=T)),\n             color=\"red\", \n             linetype=\"dashed\", \n             size=0.8) +\n  ggtitle(\"Distribution of total water points by LGA\") +\n  xlab(\"No. of water points\") +\n  ylab(\"No. of\\nLGAs\") +\n  theme(axis.title.y=element_text(angle = 0))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "1 Load R Packages\n\npacman::p_load(tidyverse, tmap, sf, sfdep)\n\n\n\n2 Importing Data\n\nstudyArea <- st_read(dsn = \"data\",\n                     layer = \"study_area\") %>%\n  st_transform(crs = 3829)\n\nReading layer `study_area' from data source \n  `C:\\deadline2359\\IS415-GAA\\In-class_Ex\\In-class_Ex05\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 7 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 121.4836 ymin: 25.00776 xmax: 121.592 ymax: 25.09288\nGeodetic CRS:  TWD97\n\n\n\nstores <- st_read(dsn = \"data\",\n                  layer = \"stores\") %>%\n  st_transform(crs = 3829)\n\nReading layer `stores' from data source \n  `C:\\deadline2359\\IS415-GAA\\In-class_Ex\\In-class_Ex05\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1409 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 121.4902 ymin: 25.01257 xmax: 121.5874 ymax: 25.08557\nGeodetic CRS:  TWD97\n\n\n\n\n3 Visualising sf Layers\n\ntmap_mode(\"view\")\ntm_shape(studyArea) +\n  tm_polygons() +\ntm_shape(stores) +\n  tm_dots(col = \"Name\",\n          size = 0.01,\n          border.col = \"black\",\n          border.lwd = 0.5) +\n  tm_view(set.zoom.limits = c(12,16))\n\n\n\n\n\n\n\n\n4 Local Colocation Quotients (LCLQ)\n\nnb <- include_self(\n  st_knn(st_geometry(stores), 6) # includes itself; hence surround neighbours = 5\n)\n\nwt <- st_kernel_weights(nb,\n                        stores,\n                        \"gaussian\",\n                        adaptive = TRUE)\n\n\nFamilyMart <- stores %>% \n  filter(Name == \"Family Mart\")\nA <- FamilyMart$Name\n\n\nSevenEleven <- stores %>% \n  filter(Name == \"7-Eleven\")\nB <- SevenEleven$Name\n\n\nLCLQ <- local_colocation(A, B, nb, wt, 49) # 49 simulations\n\n\nLCLQ_stores <- cbind(stores, LCLQ) # appending \n# cannot do relational join as LCLQ doesn't have unique identifier\n\n\ntmap_mode(\"view\")\ntm_shape(studyArea) +\n  tm_polygons() +\ntm_shape(LCLQ_stores) +\n  tm_dots(col = \"X7.Eleven\",\n          size = 0.01,\n          border.col = \"black\",\n          border.lwd = 0.5) +\n  tm_view(set.zoom.limits = c(12,16))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#kernel-density-maps",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#kernel-density-maps",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "7.1 Kernel Density Maps",
    "text": "7.1 Kernel Density Maps\n\n7.1.1 Conversion of Datatypes\n\n7.1.1.1 Converting sf data frames to sp's Spatial* class"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#conversion-of-datatypes",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#conversion-of-datatypes",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "6.1 Conversion of Datatypes",
    "text": "6.1 Conversion of Datatypes\n\n6.1.1 Converting sf data frames to sp’s Spatial* class\n\nwp_functional_spatial <- as_Spatial(wp_functional)\nwp_nonfunctional_spatial <- as_Spatial(wp_nonfunctional)\nNGA_spatial <- as_Spatial(NGA)\n\n\n\n6.1.2 Converting sp’s Spatial* Class into Generic sp Format\n\nwp_functional_sp <- as(wp_functional_spatial, \"SpatialPoints\")\nwp_nonfunctional_sp <- as(wp_nonfunctional_spatial, \"SpatialPoints\")\nNGA_sp <- as(NGA_spatial, \"SpatialPolygons\")\n\n\n\n6.1.3 Converting Generic sp Format into spatstat's ppp Format\n\nwp_functional_ppp <- as(wp_functional_sp, \"ppp\")\nwp_nonfunctional_ppp <- as(wp_nonfunctional_sp, \"ppp\")\n\nBelow shows the results of both functional and non-functional water points, using ppp object.\n\nFunctionalNon-Functional\n\n\n\nplot(wp_functional_ppp)\n\n\n\n\n\n\n\nplot(wp_nonfunctional_ppp)\n\n\n\n\n\n\n\n\n\n6.1.4 \nCheck for Duplicate Data Points\nDuplicated data points should be removed as processes under spatial point patterns analysis are largely assumed to be simple (i.e., no duplicated data).\n\nany(duplicated(wp_functional_ppp))\n\n[1] FALSE\n\n\n\nany(duplicated(wp_nonfunctional_ppp))\n\n[1] FALSE"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#section-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#section-1",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "6.2 ",
    "text": "6.2"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#creating-owin-object",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#creating-owin-object",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "6.3 Creating owin Object",
    "text": "6.3 Creating owin Object\n\nNGA_owin <- as(NGA_sp, \"owin\")\nwp_functional_ppp = wp_functional_ppp[NGA_owin]\nwp_nonfunctional_ppp = wp_nonfunctional_ppp[NGA_owin]\nplot(NGA_owin)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#kernel-density-estimation-kde",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#kernel-density-estimation-kde",
    "title": "In-class Exercise 4: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "6.4 Kernel Density Estimation (KDE)",
    "text": "6.4 Kernel Density Estimation (KDE)\n\n6.4.1 Computing KDE using Automatic Bandwidth Selection Method\nbw.ppl() is chosen as it highlights clusters more clearly compared to bw.diggle(), while not misleading resulted from using bw.CvL() or bw.scott().\n\n\n\n\n\n\nWarning\n\n\n\nchange the sigma and/or kernel to make the clusters more obvious\n\n\n\nwp_functional_bw <- density(wp_functional_ppp,\n                              sigma = bw.ppl,\n                              edge = TRUE,\n                              kernel = \"gaussian\")\nplot(wp_functional_bw)\n\n\n\n\n\nwp_nonfunctional_bw <- density(wp_nonfunctional_ppp,\n                              sigma = bw.ppl,\n                              edge = TRUE,\n                              kernel = \"gaussian\")\nplot(wp_nonfunctional_bw)\n\n\n\n\nWe will need to rescale the KDE values as the current values will not be easily understood.\n\nwp_functional_ppp.km <- rescale(wp_functional_ppp, 1000, \"km\")\nwp_nonfunctional_ppp.km <- rescale(wp_nonfunctional_ppp, 1000, \"km\")\n\n\nwp_functional_bw <- density(wp_functional_ppp.km,\n                              sigma = bw.ppl,\n                              edge = TRUE,\n                              kernel = \"gaussian\")\nplot(wp_functional_bw)\n\n\n\n\n\nwp_nonfunctional_bw <- density(wp_nonfunctional_ppp.km,\n                              sigma = bw.ppl,\n                              edge = TRUE,\n                              kernel = \"gaussian\")\nplot(wp_nonfunctional_bw)\n\n\n\n\n\nkde_wp_functional_adaptive <- adaptive.density(wp_functional_ppp.km, method = \"kernel\")\n\n\nkde_wp_nonfunctional_adaptive <- adaptive.density(wp_nonfunctional_ppp.km, method = \"kernel\")\n\n\npar(mfrow = c(1,2))\nplot(kde_wp_functional_adaptive, main = \"Functional\")\nplot(kde_wp_nonfunctional_adaptive, main = \"Non-Functional\")"
  }
]